# Copyright 2023 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~
include "backend.conf"

appName = state-pension

play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientV2Module"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"
play.modules.enabled += "uk.gov.hmrc.internalauth.client.modules.InternalAuthModule"
play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"
play.modules.enabled += "uk.gov.hmrc.statepension.config.HmrcModule"

play.filters.enabled += "play.filters.cors.CORSFilter"
play.filters.cors {
  allowedOrigins = ["http://localhost:9680"]
}

play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

# The context which the API will have via the API Platform http://API_GATEWAY/{api.gateway.context}/
api.gateway.context = "state-pension"


# The application languages
# ~~~~~
play.i18n.langs = ["en"]


# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

mongodb {
  uri = "mongodb://localhost:27017/state-pension"
}

internal-auth {
    token =  "9c75d48e-82aa-4400-8c35-b8aadb182b68"
    isTestOnlyEndpoint = true
}


# Microservice specific config
auditing {
  enabled = true
}

# API Access Configuration
api {
  access {
    type = PUBLIC
    whitelist.applicationIds = []
  }
  status = STABLE
}

rates.effectiveFromDate = "2024-04-08"

microservice {
  services {
    auth {
      host = localhost
      port = 8500
    }

    internal-auth {
      host = localhost
      port = 8470
    }

    service-locator {
      host = localhost
      port = 9602
      enabled = false
    }

    citizen-details {
      host = localhost
      port = 9337
    }

    nps-hod {
      host = localhost
      port = 9306
      originatoridkey = localkey
      originatoridvalue = localid
    }

    des-hod {
      host = localhost
      port = 9306
      originatoridkey = localkey
      originatoridvalue = localid
    }

    ni-and-sp-proxy-cache {
      host = localhost
      port = 10140
    }

    if-hod {
      host = localhost
      port = 9306
      originatoridkey = localkey
      originatoridvalue = localid
    }
  }
}


# COPE
# ~~~~~
cope {
  dwp.originatorId = "DA_PFDWP"
  returnToServiceWeeks = 4
  ttlInWeeks = 13
}

ninoHashingKey = "gn:a$V96?cFHmjjcSz31tU,Xe;hOLIYeknIPIbj6Y2GAyht3#Cs+ir&hd{(50`vGAd/k8OIIV:nbM4,c&z9rX+mmK<?qK`sbmKB*Y#Ip.N'$@sX~W[6{KIXA|k`"
